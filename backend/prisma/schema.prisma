generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())
  comments  Comment[]
  Follow    Follow[]
  ratings   Rating[]
  stories   Story[]   @relation("AuthorStories")
}

model Genre {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Story Story[]
}

model Story {
  id          Int         @id @default(autoincrement())
  title       String      @unique
  description String
  coverImage  String?
  status      StoryStatus @default(ONGOING)
  authorId    Int
  genreId     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  chapters    Chapter[]
  Follow      Follow[]
  ratings     Rating[]
  author      User        @relation("AuthorStories", fields: [authorId], references: [id])
  Genre       Genre       @relation(fields: [genreId], references: [id])
}

model Chapter {
  id        Int       @id @default(autoincrement())
  storyId   Int
  title     String
  number    Int
  content   String
  createdAt DateTime  @default(now())
  story     Story     @relation(fields: [storyId], references: [id])
  comments  Comment[]

  @@unique([storyId, number])
}

model Rating {
  id        Int      @id @default(autoincrement())
  storyId   Int
  userId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  story     Story    @relation(fields: [storyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([storyId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  chapterId Int
  userId    Int
  content   String
  createdAt DateTime @default(now())
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  userId    Int
  storyId   Int
  createdAt DateTime @default(now())
  Story     Story    @relation(fields: [storyId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, storyId])
}

enum UserRole {
  USER
  AUTHOR
  ADMIN
}

enum StoryStatus {
  ONGOING
  COMPLETED
}
