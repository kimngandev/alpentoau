import { PrismaClient, UserRole, StoryStatus } from '@prisma/client';
import * as bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function main() {
  console.log('üîÑ Updating existing database with additional seed data...');

  // Check existing data
  const existingUsersCount = await prisma.user.count();
  const existingStoriesCount = await prisma.story.count();
  const existingGenresCount = await prisma.genre.count();
  
  console.log(`üìä Current database state:`);
  console.log(`   Users: ${existingUsersCount}`);
  console.log(`   Stories: ${existingStoriesCount}`);
  console.log(`   Genres: ${existingGenresCount}`);

  // 1. CREATE MISSING GENRES (ch·ªâ d√πng name, kh√¥ng d√πng slug)
  console.log('\nüè∑Ô∏è Adding missing genres...');
  const genresData = [
    { name: 'Ti√™n Hi·ªáp' },
    { name: 'Ki·∫øm Hi·ªáp' },
    { name: 'Ng√¥n T√¨nh' },
    { name: 'ƒêam M·ªπ' },
    { name: 'Fantasy' },
    { name: 'Phi√™u L∆∞u' },
    { name: 'Huy·ªÅn Huy·ªÖn' },
    { name: 'ƒê√¥ Th·ªã' },
    { name: 'Tr·ªçng Sinh' },
    { name: 'Xuy√™n Kh√¥ng' },
    { name: 'Linh D·ªã' },
    { name: 'Trinh Th√°m' },
  ];

  const createdGenres = [];
  for (const genreData of genresData) {
    try {
      const genre = await prisma.genre.upsert({
        where: { name: genreData.name },
        update: {}, // Kh√¥ng update n·∫øu ƒë√£ t·ªìn t·∫°i
        create: genreData,
      });
      createdGenres.push(genre);
      console.log(`   ‚úÖ Genre processed: ${genre.name}`);
    } catch (error) {
      console.log(`   ‚ö†Ô∏è Genre already exists or error: ${genreData.name}`);
    }
  }
  console.log(`‚úÖ Genres processed: ${createdGenres.length} genres now available`);

  // 2. CREATE SAMPLE USERS
  console.log('\nüë§ Adding sample users...');
  const password = await bcrypt.hash('demo123456', 10);
  
  const sampleUsers = [
    {
      username: 'admin_demo',
      email: 'admin@demo.com',
      role: UserRole.ADMIN,
    },
    {
      username: 'author_demo',
      email: 'author@demo.com', 
      role: UserRole.AUTHOR,
    },
    {
      username: 'user_demo',
      email: 'user@demo.com',
      role: UserRole.USER,
    },
  ];

  const createdUsers = [];
  for (const userData of sampleUsers) {
    try {
      const user = await prisma.user.create({
        data: {
          ...userData,
          password,
          isVerified: true,
        },
      });
      createdUsers.push(user);
      console.log(`   ‚úÖ Created user: ${user.username} (${user.email})`);
    } catch (error) {
      if (error.code === 'P2002') {
        console.log(`   ‚ö†Ô∏è User already exists: ${userData.email}`);
      } else {
        console.log(`   ‚ùå Error creating user ${userData.email}:`, error.message);
      }
    }
  }

  // 3. ADD SAMPLE STORIES (n·∫øu c√≥ authors)
  const existingAuthors = await prisma.user.findMany({
    where: { role: UserRole.AUTHOR },
    take: 3,
  });

  if (existingAuthors.length > 0) {
    console.log('\nüìö Adding sample stories...');
    
    // L·∫•y genres c√≥ s·∫µn
    const availableGenres = await prisma.genre.findMany();
    
    const sampleStories = [
      {
        title: 'Demo Story - H√†nh Tr√¨nh Tu Ti√™n',
        description: 'C√¢u chuy·ªán demo v·ªÅ h√†nh tr√¨nh tu ti√™n ƒë·∫ßy gian kh√≥ c·ªßa m·ªôt thi·∫øu ni√™n b√¨nh th∆∞·ªùng. V·ªõi √Ω ch√≠ ki√™n c∆∞·ªùng v√† nh·ªØng cu·ªôc g·∫∑p g·ª° ƒë·ªãnh m·ªánh, li·ªáu anh c√≥ th·ªÉ v∆∞·ª£t qua m·ªçi th·ª≠ th√°ch ƒë·ªÉ ƒë·∫°t ƒë·∫øn ƒë·ªânh cao c·ªßa s·ª©c m·∫°nh?',
        coverImage: 'https://placehold.co/300x400/8b5cf6/white?text=Tu+Tien',
        status: StoryStatus.ONGOING,
        authorId: existingAuthors[0].id,
        // Ch·ªâ assign genre ƒë·∫ßu ti√™n c√≥ s·∫µn
        genreId: availableGenres.length > 0 ? availableGenres[0].id : null,
      },
      {
        title: 'Demo Story - T√¨nh Y√™u Th·∫ßm L·∫∑ng',
        description: 'M·ªôt c√¢u chuy·ªán ng·ªçt ng√†o v·ªÅ t√¨nh y√™u h·ªçc ƒë∆∞·ªùng. Hai ng∆∞·ªùi b·∫°n th√¢n t·ª´ thu·ªü nh·ªè d·∫ßn nh·∫≠n ra t√¨nh c·∫£m ƒë·∫∑c bi·ªát d√†nh cho nhau, nh∆∞ng li·ªáu h·ªç c√≥ ƒë·ªß can ƒë·∫£m ƒë·ªÉ th·ªï l·ªô?',
        coverImage: 'https://placehold.co/300x400/ec4899/white?text=Love+Story',
        status: StoryStatus.COMPLETED,
        authorId: existingAuthors[1] ? existingAuthors[1].id : existingAuthors[0].id,
        genreId: availableGenres.length > 1 ? availableGenres[1].id : (availableGenres.length > 0 ? availableGenres[0].id : null),
      },
    ];

    for (const storyData of sampleStories) {
      try {
        // Ch·ªâ t·∫°o story n·∫øu c√≥ genre
        if (!storyData.genreId) {
          console.log(`   ‚ö†Ô∏è Skipping story ${storyData.title} - no genres available`);
          continue;
        }

        const story = await prisma.story.create({
          data: storyData,
        });

        // Add sample chapters
        for (let i = 1; i <= 3; i++) {
          await prisma.chapter.create({
            data: {
              storyId: story.id,
              title: `Ch∆∞∆°ng ${i}: ${getRandomChapterTitle()}`,
              number: i,
              content: getRandomChapterContent(story.title, i),
            },
          });
        }

        console.log(`   ‚úÖ Created story: ${story.title} (3 chapters)`);
      } catch (error) {
        if (error.code === 'P2002') {
          console.log(`   ‚ö†Ô∏è Story already exists: ${storyData.title}`);
        } else {
          console.log(`   ‚ùå Error creating story ${storyData.title}:`, error.message);
        }
      }
    }
  }

  // 4. ADD SAMPLE INTERACTIONS
  const existingUsers = await prisma.user.findMany({
    where: { role: UserRole.USER },
    take: 5,
  });

  const existingStories = await prisma.story.findMany({
    take: 5,
  });

  if (existingUsers.length > 0 && existingStories.length > 0) {
    console.log('\nüí¨ Adding sample interactions...');
    
    // Add comments
    const commentTexts = [
      'Truy·ªán hay qu√°! C·∫£m ∆°n t√°c gi·∫£!',
      'C·ªët truy·ªán cu·ªën h√∫t, kh√¥ng th·ªÉ ng·ª´ng ƒë·ªçc!',
      'Ch·ªù ch∆∞∆°ng ti·∫øp theo!',
      'Nh√¢n v·∫≠t ƒë∆∞·ª£c x√¢y d·ª±ng r·∫•t t·ªët!',
      'Recommend cho m·ªçi ng∆∞·ªùi!',
    ];

    for (let i = 0; i < 5; i++) {
      const randomUser = existingUsers[Math.floor(Math.random() * existingUsers.length)];
      const randomStory = existingStories[Math.floor(Math.random() * existingStories.length)];
      const randomText = commentTexts[Math.floor(Math.random() * commentTexts.length)];

      try {
        await prisma.comment.create({
          data: {
            userId: randomUser.id,
            // S·ª≠ d·ª•ng chapterId thay v√¨ storyId n·∫øu schema y√™u c·∫ßu
            chapterId: await getRandomChapterId(randomStory.id),
            content: randomText,
          },
        });
      } catch (error) {
        // Skip if error - c√≥ th·ªÉ do schema kh√°c
        console.log(`   ‚ö†Ô∏è Comment creation skipped: ${error.message}`);
      }
    }

    console.log('   ‚úÖ Added sample comments');
  }

  // Final summary
  const finalUsersCount = await prisma.user.count();
  const finalStoriesCount = await prisma.story.count();
  const finalGenresCount = await prisma.genre.count();

  console.log('\nüéâ Database update completed!');
  console.log(`üìä Updated database state:`);
  console.log(`   Users: ${existingUsersCount} ‚Üí ${finalUsersCount} (+${finalUsersCount - existingUsersCount})`);
  console.log(`   Stories: ${existingStoriesCount} ‚Üí ${finalStoriesCount} (+${finalStoriesCount - existingStoriesCount})`);
  console.log(`   Genres: ${existingGenresCount} ‚Üí ${finalGenresCount} (+${finalGenresCount - existingGenresCount})`);
  console.log('');
  console.log('‚úÖ Your existing data is preserved!');
  console.log('üÜï New demo accounts:');
  console.log('   - admin@demo.com / demo123456');
  console.log('   - author@demo.com / demo123456');
  console.log('   - user@demo.com / demo123456');
}

async function getRandomChapterId(storyId: number) {
  const chapters = await prisma.chapter.findMany({
    where: { storyId },
    select: { id: true },
  });
  return chapters.length > 0 ? chapters[0].id : null;
}

function getRandomChapterTitle(): string {
  const titles = [
    'Kh·ªüi ƒë·∫ßu h√†nh tr√¨nh',
    'Cu·ªôc g·∫∑p g·ª° ƒë·ªãnh m·ªánh', 
    'B√≠ m·∫≠t ƒë∆∞·ª£c ti·∫øt l·ªô',
    'Th·ª≠ th√°ch ƒë·∫ßu ti√™n',
    'Ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh',
    'Nguy hi·ªÉm r√¨nh r·∫≠p',
    'Quy·∫øt ƒë·ªãnh kh√≥ khƒÉn',
    'Tr·∫≠n chi·∫øn sinh t·ª≠',
    'S·ª©c m·∫°nh th·ª©c t·ªânh',
    'H√†nh tr√¨nh m·ªõi b·∫Øt ƒë·∫ßu',
  ];
  return titles[Math.floor(Math.random() * titles.length)];
}

function getRandomChapterContent(storyTitle: string, chapterNumber: number): string {
  return `ƒê√¢y l√† n·ªôi dung demo cho ch∆∞∆°ng ${chapterNumber} c·ªßa truy·ªán "${storyTitle}".

Trong ch∆∞∆°ng n√†y, c√¢u chuy·ªán ti·∫øp t·ª•c ph√°t tri·ªÉn v·ªõi nh·ªØng di·ªÖn bi·∫øn h·∫•p d·∫´n. Nh√¢n v·∫≠t ch√≠nh ƒë√£ ph·∫£i ƒë·ªëi m·∫∑t v·ªõi nh·ªØng th·ª≠ th√°ch m·ªõi, ƒë√≤i h·ªèi s·ª± can ƒë·∫£m v√† tr√≠ tu·ªá ƒë·ªÉ v∆∞·ª£t qua.

"Ch√∫ng ta ph·∫£i h√†nh ƒë·ªông ngay b√¢y gi·ªù," m·ªôt gi·ªçng n√≥i quy·∫øt ƒëo√°n vang l√™n. "Kh√¥ng c√≤n th·ªùi gian ƒë·ªÉ do d·ª± n·ªØa."

√Ånh m·∫Øt quy·∫øt t√¢m hi·ªán r√µ tr√™n g∆∞∆°ng m·∫∑t c·ªßa nh√¢n v·∫≠t ch√≠nh. D√π bi·∫øt r·∫±ng con ƒë∆∞·ªùng ph√≠a tr∆∞·ªõc ƒë·∫ßy gian nan, nh∆∞ng h·ªç ƒë√£ s·∫µn s√†ng ƒë·ªëi m·∫∑t v·ªõi m·ªçi kh√≥ khƒÉn.

C√¢u chuy·ªán s·∫Ω ti·∫øp t·ª•c trong ch∆∞∆°ng sau v·ªõi nh·ªØng b·∫•t ng·ªù th√∫ v·ªã...

(ƒê√¢y l√† n·ªôi dung demo ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông)`;
}

main()
  .catch((e) => {
    console.error('‚ùå Error during database update:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });